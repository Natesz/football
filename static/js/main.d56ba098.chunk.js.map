{"version":3,"sources":["main/Matches.js","main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Matches","competitions","useState","scheduledMatches","setScheduledMatches","liveMatches","setLiveMatches","useParams","competitionName","eventId","matchDetails","setMatchDetails","history","useHistory","useEffect","currentComp","filter","comp","name","replace","length","instance","axios","create","baseURL","headers","get","id","then","res","data","matches","catch","error","console","log","undefined","showScheduledMatches","match","Date","utcDate","map","className","key","to","ListGroup","Item","homeTeam","awayTeam","showLiveMatches","showMatchDetails","Object","keys","matchday","gameMinute","lastUpdated","toFixed","status","competition","score","fullTime","toString","slice","venue","onClick","goBack","Container","Main","setCompetitions","plan","Row","alt","src","area","ensignUrl","App","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d56ba098.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { ListGroup, Container } from 'react-bootstrap';\r\nimport './Main.css';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction Matches({ competitions }) {\r\n\r\n    const [scheduledMatches, setScheduledMatches] = useState([]);\r\n    const [liveMatches, setLiveMatches] = useState([]);\r\n    const { competitionName, eventId } = useParams();\r\n    const [matchDetails, setMatchDetails] = useState({});\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const currentComp = competitions.filter(comp => comp.name.replace(/\\s/g, '') === competitionName);\r\n\r\n        if (currentComp.length !== 0) {\r\n\r\n            const instance = axios.create({\r\n                baseURL: 'https://api.football-data.org/v2/',\r\n                headers: { 'X-Auth-Token': '42246a12f47b4afcad3a9a516972ff9d' }\r\n            });\r\n\r\n            instance.get(`competitions/${currentComp[0].id}/matches?status=LIVE`)\r\n                .then(res => setLiveMatches(res.data.matches)).catch(function (error) {\r\n                    console.log(error);\r\n                  })\r\n\r\n            instance.get(`competitions/${currentComp[0].id}/matches?status=SCHEDULED`)\r\n                .then(res => setScheduledMatches(res.data.matches)).catch(function (error) {\r\n                    console.log(error);\r\n                  })\r\n            }\r\n    }, [competitionName, competitions])\r\n\r\n    useEffect(() => {\r\n\r\n        if (eventId !== undefined) {\r\n\r\n        const instance = axios.create({\r\n            baseURL: 'https://api.football-data.org/v2/',\r\n            headers: { 'X-Auth-Token': '42246a12f47b4afcad3a9a516972ff9d' }\r\n        });\r\n\r\n        instance.get(`/matches/${eventId}`)\r\n            .then(res => {\r\n                setMatchDetails(res.data)\r\n                console.log(res.data);\r\n            })\r\n        }\r\n    }, [eventId])\r\n\r\n    let showScheduledMatches = scheduledMatches.filter(match => {\r\n        let gameTime = new Date(match.utcDate);\r\n        let today = new Date();\r\n        return ((gameTime - today) / 1000 / 60 / 60 / 24) < 15;\r\n    }).map(match => (\r\n        <NavLink className=\"item\" key={match.id} to={`/${competitionName}/${match.id}`}>\r\n            <ListGroup.Item className=\"item\">\r\n                <p>{match.homeTeam.name} : {match.awayTeam.name} <span className=\"scheduled\">SCHEDULED</span></p>\r\n            </ListGroup.Item>\r\n        </NavLink>\r\n    ))\r\n\r\n    let showLiveMatches = liveMatches.map(match => (\r\n        <NavLink className=\"item\" key={match.id} to={`/${competitionName}/${match.id}`}>\r\n            <ListGroup.Item className=\"item\">\r\n                <p>{match.homeTeam.name} : {match.awayTeam.name} <span className=\"live\">LIVE</span></p>\r\n            </ListGroup.Item>\r\n        </NavLink>\r\n    ))\r\n\r\n    if(eventId !== undefined){\r\n        showScheduledMatches = null;\r\n        showLiveMatches = null;\r\n    }\r\n\r\n    let showMatchDetails = [];\r\n\r\n    const goBackHandler = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    if(Object.keys(matchDetails).length > 0 && eventId !== undefined) {\r\n        let matchday = new Date(matchDetails.match.utcDate);\r\n        let currentTime = new Date(matchDetails.match.lastUpdated);\r\n        let gameMinute = ((currentTime - matchday)/1000/60).toFixed(0);\r\n        if(matchDetails.match.status === 'PAUSED'){\r\n            gameMinute = 45;\r\n        }\r\n        if(matchDetails.match.status !== 'PAUSED' && gameMinute >= 63){\r\n            gameMinute = gameMinute - 21;\r\n        }\r\n        showMatchDetails = (\r\n            <div className=\"segment\">\r\n                <p>{matchDetails.match.competition.name}</p>\r\n                <p>{matchDetails.match.homeTeam.name} - {matchDetails.match.awayTeam.name}</p>\r\n                <p className={matchDetails.match.status === 'SCHEDULED' ? 'scheduled' : 'live'}>{matchDetails.match.status === 'SCHEDULED' ? 'scheduled' : 'live'}</p>\r\n                <p>Score: {matchDetails.match.score.fullTime.homeTeam} - {matchDetails.match.score.fullTime.awayTeam}</p>\r\n                <p>Matchday: {matchDetails.match.matchday}</p> \r\n                <p>{matchday.toString().slice(3,24)}</p>\r\n                <p>Stadium: {matchDetails.match.venue}</p>\r\n                <p>{gameMinute > 0 ? `Minute: ${gameMinute}'` : null} {matchDetails.match.status === 'PAUSED' ? ' Half time': null}</p>\r\n                <div><button onClick={goBackHandler}>Go Back</button></div>\r\n            </div>\r\n        );\r\n    } else {\r\n        showMatchDetails = [];\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <ListGroup>\r\n                { showLiveMatches }\r\n                { showScheduledMatches }\r\n            </ListGroup>\r\n            { showMatchDetails }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Matches;","import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Matches from './Matches';\r\nimport { ListGroup, Row } from 'react-bootstrap';\r\nimport './Main.css'\r\n\r\nfunction Main() {\r\n\r\n  const [competitions, setCompetitions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const instance = axios.create({\r\n      baseURL: 'https://api.football-data.org/v2/',\r\n      headers: { 'X-Auth-Token': '42246a12f47b4afcad3a9a516972ff9d' }\r\n    });\r\n\r\n    instance.get('competitions/')\r\n      .then(res => setCompetitions(res.data.competitions.filter(comp => comp.plan === 'TIER_ONE')))\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      })\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>FOOTBALL WEB APP</h1>\r\n      <Row className=\"row justify-content-md-center\">\r\n        <div>\r\n          <ListGroup className=\"main leagues\">\r\n            {competitions.filter(comp => {\r\n              return (comp.name === 'Championship' || comp.name === 'Premier League' || comp.name === 'Serie A'\r\n                || comp.name === 'Bundesliga' || comp.name === 'Primera Division' || comp.name === 'Primeira Liga')\r\n            }).map((comp) => (\r\n              <NavLink key={comp.id} className=\"item\" to={`/${comp.name.replace(/\\s/g, '')}`}>\r\n                <ListGroup.Item className=\"item\">\r\n                  <img className=\"image\" alt=\"\" src={comp.area.ensignUrl}></img>\r\n                  <p className=\"league\">{comp.name}</p>\r\n                </ListGroup.Item>\r\n              </NavLink>\r\n            ))}\r\n          </ListGroup>\r\n        </div>\r\n        <div>\r\n          <Matches competitions={competitions} />\r\n        </div>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Main from './main/Main';\n\nfunction App() {\n\n  \n  return (\n    <BrowserRouter>\n      <Route path='/:competitionName?/:eventId?'>\n        <Main className=\"App\"/>\n      </Route>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}